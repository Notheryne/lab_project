{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\NPC\\\\Trader.jsx\";\nimport React from 'react';\nimport '../../styles/Trader.css';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport { ITEM_STAT_DISPLAY_NAME, TRADER_PATH, TRADER_TRADE_PATH } from \"../../constants/routes\";\nimport { Image } from \"react-bootstrap\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\n\nclass Trader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getItemDescription = itemData => {\n      const stats = Object.keys(ITEM_STAT_DISPLAY_NAME).map(statName => {\n        return React.createElement(\"p\", {\n          key: statName,\n          className: \"item-description-row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, ITEM_STAT_DISPLAY_NAME[statName], \": \", itemData[statName]);\n      });\n      return React.createElement(Tooltip, {\n        id: \"tooltip-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, itemData['name']), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, itemData['slot']), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Price: \", itemData['price']), stats);\n    };\n\n    this.buyItem = itemId => {\n      console.log(itemId);\n      this.props.sendPostRequest(TRADER_TRADE_PATH, {\n        bp_id: itemId\n      }).then(response => {\n        this.props.setCharacterGold(response['data']['gold']);\n        console.log(response);\n      }).catch(error => {\n        console.log(error.response);\n      });\n    };\n\n    this.renderItemsRow = itemsInRow => {\n      const items = itemsInRow.map(itemData => {\n        console.log(itemData);\n        const itemName = itemData['name'];\n        const itemId = itemData['id'];\n        return React.createElement(Col, {\n          key: \"item-data-for-\" + itemName + \"-(id \" + itemId + \")\",\n          xs: \"auto\",\n          className: \"m-auto trader-column\" // style={{border: \"2px groove rgba(12, 7, 15, 0.3)\",}}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(OverlayTrigger, {\n          trigger: \"hover\",\n          placement: \"bottom\",\n          overlay: this.getItemDescription(itemData),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(Image, {\n          src: itemData['img_path'],\n          className: \"d-inline-block p-2\",\n          height: 220,\n          width: 140,\n          onClick: () => {\n            this.buyItem(itemId);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        })), React.createElement(\"p\", {\n          className: \"bg-dark text-light trader-item-name\",\n          style: {\n            width: 140,\n            \"white-space\": \"nowrap\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, itemData['name'])));\n      });\n      return items;\n    };\n\n    this.renderItems = () => {\n      const topRowItems = this.state.traderItems.slice(0, 3);\n      const bottomRowItems = this.state.traderItems.slice(3, 6);\n      const topRow = this.renderItemsRow(topRowItems);\n      const bottomRow = this.renderItemsRow(bottomRowItems);\n      const rowClassName = \"bg-light w-75 m-auto\";\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: rowClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, topRow), React.createElement(Row, {\n        className: rowClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, bottomRow));\n    };\n\n    this.state = {\n      isLoading: true,\n      itemsReady: false,\n      npcName: '',\n      npcImagePath: '',\n      npcText: '',\n      charGold: 0,\n      traderItems: {}\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(TRADER_PATH).then(response => {\n      this.setState({\n        npcName: response['data']['name']\n      });\n      this.setState({\n        npcImagePath: response['data']['img_path']\n      });\n      this.setState({\n        npcText: response['data']['text']\n      });\n      this.setState({\n        charGold: response['data']['gold']\n      });\n      this.props.setCharacterGold(response['data']['gold']);\n      this.setState({\n        traderItems: response['data']['items']\n      });\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    if (!this.state.isLoading) {\n      return React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: this.state.npcImagePath,\n        height: 300,\n        width: 280,\n        alt: \"healer image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"mt-3 form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, this.state.npcName), \": \", this.state.npcText)), React.createElement(\"div\", {\n        className: \"mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, this.renderItems()));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Trader;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/NPC/Trader.jsx"],"names":["React","Jumbotron","ITEM_STAT_DISPLAY_NAME","TRADER_PATH","TRADER_TRADE_PATH","Image","Spinner","Row","Col","OverlayTrigger","Tooltip","Trader","Component","constructor","props","getItemDescription","itemData","stats","Object","keys","map","statName","buyItem","itemId","console","log","sendPostRequest","bp_id","then","response","setCharacterGold","catch","error","renderItemsRow","itemsInRow","items","itemName","width","renderItems","topRowItems","state","traderItems","slice","bottomRowItems","topRow","bottomRow","rowClassName","isLoading","itemsReady","npcName","npcImagePath","npcText","charGold","componentDidMount","sendGetRequest","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../../styles/Trader.css';\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport {ITEM_STAT_DISPLAY_NAME, TRADER_PATH, TRADER_TRADE_PATH} from \"../../constants/routes\";\r\nimport {Image} from \"react-bootstrap\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\n\r\nclass Trader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            itemsReady: false,\r\n            npcName: '',\r\n            npcImagePath: '',\r\n            npcText: '',\r\n            charGold: 0,\r\n            traderItems: {},\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.sendGetRequest(TRADER_PATH)\r\n            .then((response) => {\r\n                this.setState({npcName: response['data']['name']});\r\n                this.setState({npcImagePath: response['data']['img_path']});\r\n                this.setState({npcText: response['data']['text']});\r\n                this.setState({charGold: response['data']['gold']});\r\n                this.props.setCharacterGold(response['data']['gold']);\r\n                this.setState({traderItems: response['data']['items']});\r\n                this.setState({isLoading: false});\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        })\r\n    }\r\n\r\n    getItemDescription = (itemData) => {\r\n        const stats = Object.keys(ITEM_STAT_DISPLAY_NAME).map(statName => {\r\n            return (\r\n                <p key={statName} className=\"item-description-row\">{ITEM_STAT_DISPLAY_NAME[statName]}: {itemData[statName]}</p>\r\n            );\r\n        });\r\n        return (\r\n            <Tooltip id=\"tooltip-bottom\">\r\n                <strong>{itemData['name']}</strong> <br/>\r\n                <small>{itemData['slot']}</small> <br/>\r\n                <strong>Price: {itemData['price']}</strong>\r\n                {stats}\r\n            </Tooltip>\r\n        );\r\n    };\r\n\r\n    buyItem = (itemId) => {\r\n        console.log(itemId);\r\n        this.props.sendPostRequest(TRADER_TRADE_PATH, {bp_id: itemId})\r\n            .then((response) => {\r\n                this.props.setCharacterGold(response['data']['gold']);\r\n                console.log(response);\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        })\r\n    };\r\n\r\n    renderItemsRow = (itemsInRow) => {\r\n        const items = itemsInRow.map((itemData) => {\r\n            console.log(itemData);\r\n            const itemName = itemData['name'];\r\n            const itemId = itemData['id'];\r\n\r\n            return (\r\n                <Col\r\n                    key={\"item-data-for-\" + itemName + \"-(id \" + itemId + \")\"}\r\n                    xs=\"auto\"\r\n                    className=\"m-auto trader-column\"\r\n                    // style={{border: \"2px groove rgba(12, 7, 15, 0.3)\",}}\r\n                >\r\n                    <OverlayTrigger\r\n                        trigger=\"hover\"\r\n                        placement=\"bottom\"\r\n                        overlay={this.getItemDescription(itemData)}\r\n                    >\r\n                        <Image\r\n                            src={itemData['img_path']}\r\n                            className=\"d-inline-block p-2\"\r\n                            height={220}\r\n                            width={140}\r\n                            onClick={() => {this.buyItem(itemId)}}\r\n                        />\r\n                    </OverlayTrigger>\r\n                    <p\r\n                        className=\"bg-dark text-light trader-item-name\"\r\n                        style={{width: 140, \"white-space\": \"nowrap\"}}\r\n                    >\r\n                        <strong>{itemData['name']}</strong>\r\n                    </p>\r\n                </Col>\r\n            )\r\n        });\r\n        return items;\r\n    };\r\n\r\n    renderItems = () => {\r\n        const topRowItems = this.state.traderItems.slice(0, 3);\r\n        const bottomRowItems = this.state.traderItems.slice(3, 6);\r\n        const topRow = this.renderItemsRow(topRowItems);\r\n        const bottomRow = this.renderItemsRow(bottomRowItems);\r\n        const rowClassName = \"bg-light w-75 m-auto\";\r\n        return (\r\n            <React.Fragment>\r\n                <Row className={rowClassName}>\r\n                    {topRow}\r\n                </Row>\r\n                <Row className={rowClassName}>\r\n                    {bottomRow}\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <Jumbotron>\r\n                    <div className=\"text-center\">\r\n                        <Image\r\n                            src={this.state.npcImagePath}\r\n                            height={300}\r\n                            width={280}\r\n                            alt=\"healer image\"\r\n                        />\r\n                        <span className=\"mt-3 form-control\">\r\n                            <strong>{this.state.npcName}</strong>: {this.state.npcText}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"mt-3\">\r\n                        {this.renderItems()}\r\n                    </div>\r\n                </Jumbotron>\r\n            );\r\n        } else {\r\n            return (\r\n                <Spinner animation=\"primary\"/>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Trader;"]},"metadata":{},"sourceType":"module"}