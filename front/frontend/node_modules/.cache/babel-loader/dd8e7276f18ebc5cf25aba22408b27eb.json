{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\Ranking.jsx\";\nimport React, { Component } from 'react';\nimport { RANKING_HEADERS_DISPLAY, RANKING_PATH } from \"../constants/routes\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\nimport Pagination from \"react-bootstrap/Pagination\";\n\nclass Ranking extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRankingData = (header, order, activePage) => {\n      const params = {\n        'sort_by': header,\n        'page': activePage,\n        'price': this.state.price,\n        'order': order ? 'desc' : 'asc'\n      };\n      this.props.sendGetRequestWithData(RANKING_PATH, params).then(response => {\n        this.setState({\n          characters: response['data']['characters']\n        });\n        this.setState({\n          lastPage: response['data']['last_page']\n        });\n        this.setState({\n          isLoading: false\n        });\n      }).catch(error => {\n        console.log(error.response);\n        this.setState({\n          errorStatus: error.response['data']['message']\n        });\n      });\n    };\n\n    this.handleTableHeaderClick = header => {\n      this.setState({\n        isLoading: true\n      });\n      let order;\n\n      if (this.state.sortBy !== header) {\n        this.setState({\n          sortBy: header\n        });\n        order = this.state.order;\n      } else {\n        order = !this.state.order;\n      }\n\n      this.setState({\n        order: order\n      });\n      this.getRankingData(header, order, this.state.activePage);\n    };\n\n    this.renderTableHead = () => {\n      const headers = Object.keys(RANKING_HEADERS_DISPLAY).map(header => {\n        return React.createElement(\"th\", {\n          onClick: () => this.handleTableHeaderClick(header),\n          key: header,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, RANKING_HEADERS_DISPLAY[header]);\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        onClick: () => {\n          this.handleTableHeaderClick('experience');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"#\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Character Name\"), headers);\n    };\n\n    this.renderTableRows = () => {\n      const characters = this.state.characters;\n      return Object.keys(this.state.characters).map(characterNumber => {\n        const characterData = characters[characterNumber];\n        const stats = Object.keys(characterData).map(characterStat => {\n          return React.createElement(\"td\", {\n            key: characterData['name'] + '-' + characterStat,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, characterData[characterStat]);\n        });\n        return React.createElement(\"tr\", {\n          key: characterNumber,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, characterNumber), stats);\n      });\n    };\n\n    this.handlePageChange = pageNumber => {\n      this.setState({\n        activePage: pageNumber\n      });\n      this.getRankingData(this.state.sortBy, this.state.order, pageNumber);\n    };\n\n    this.getPages = () => {\n      let pages = [];\n\n      for (let number = 1; number <= this.state.lastPage; number++) {\n        pages.push(React.createElement(Pagination.Item, {\n          value: number,\n          key: number,\n          active: number === this.state.activePage,\n          onClick: () => this.handlePageChange(number),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, number));\n      }\n\n      return pages;\n    };\n\n    this.state = {\n      isLoading: true,\n      activePage: 1,\n      lastPage: -1,\n      characters: {},\n      price: 0,\n      sortBy: 'experience',\n      order: true,\n      errorStatus: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getRankingData(this.state.sortBy, this.state.order, this.state.activePage);\n  }\n\n  render() {\n    if (!this.state.isLoading) {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"w-75 m-auto\",\n        style: {\n          overflow: 'hidden'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Pagination, {\n        className: \"float-right flex-nowrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.getPages())), React.createElement(Table, {\n        bordered: true,\n        hover: true,\n        striped: true,\n        className: \"w-75 ml-auto mr-auto text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, this.renderTableHead())), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, this.renderTableRows())));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Ranking;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/Ranking.jsx"],"names":["React","Component","RANKING_HEADERS_DISPLAY","RANKING_PATH","Spinner","Table","Pagination","Ranking","constructor","props","getRankingData","header","order","activePage","params","state","price","sendGetRequestWithData","then","response","setState","characters","lastPage","isLoading","catch","error","console","log","errorStatus","handleTableHeaderClick","sortBy","renderTableHead","headers","Object","keys","map","renderTableRows","characterNumber","characterData","stats","characterStat","handlePageChange","pageNumber","getPages","pages","number","push","componentDidMount","render","overflow"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {RANKING_HEADERS_DISPLAY, RANKING_PATH} from \"../constants/routes\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\nclass Ranking extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            activePage: 1,\r\n            lastPage: -1,\r\n            characters: {},\r\n            price: 0,\r\n            sortBy: 'experience',\r\n            order: true,\r\n            errorStatus: '',\r\n        }\r\n    }\r\n\r\n    getRankingData = (header, order, activePage) => {\r\n        const params = {\r\n            'sort_by': header,\r\n            'page': activePage,\r\n            'price': this.state.price,\r\n            'order': order ? 'desc' : 'asc',\r\n        };\r\n        this.props.sendGetRequestWithData(RANKING_PATH, params)\r\n            .then((response) => {\r\n                this.setState({characters: response['data']['characters']});\r\n                this.setState({lastPage: response['data']['last_page']});\r\n                this.setState({isLoading: false})\r\n            }).catch((error) => {\r\n            console.log(error.response);\r\n            this.setState({errorStatus: error.response['data']['message']});\r\n        })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getRankingData(this.state.sortBy, this.state.order, this.state.activePage);\r\n    }\r\n\r\n    handleTableHeaderClick = (header) => {\r\n        this.setState({isLoading: true});\r\n        let order;\r\n        if (this.state.sortBy !== header) {\r\n            this.setState({sortBy: header});\r\n            order = this.state.order;\r\n        } else {\r\n            order = !this.state.order;\r\n        }\r\n        this.setState({order: order});\r\n        this.getRankingData(header, order, this.state.activePage);\r\n    };\r\n\r\n    renderTableHead = () => {\r\n        const headers = Object.keys(RANKING_HEADERS_DISPLAY).map(header => {\r\n            return (\r\n                <th onClick={() => this.handleTableHeaderClick(header)} key={header}>\r\n                    {RANKING_HEADERS_DISPLAY[header]}\r\n                </th>\r\n            )});\r\n        return (\r\n            <React.Fragment>\r\n                <th onClick={() => {this.handleTableHeaderClick('experience')}}>#</th>\r\n                <th>Character Name</th>\r\n                {headers}\r\n            </React.Fragment>\r\n        )};\r\n\r\n    renderTableRows = () => {\r\n        const characters = this.state.characters;\r\n        return Object.keys(this.state.characters).map(characterNumber => {\r\n            const characterData = characters[characterNumber];\r\n            const stats = Object.keys(characterData).map(characterStat => {\r\n                return <td key={characterData['name'] + '-' + characterStat}>{characterData[characterStat]}</td>\r\n            });\r\n            return (\r\n                <tr key={characterNumber}>\r\n                    <td>{characterNumber}</td>\r\n                    {stats}\r\n                </tr>\r\n            )\r\n        })\r\n    };\r\n\r\n    handlePageChange = (pageNumber) => {\r\n        this.setState({activePage: pageNumber});\r\n        this.getRankingData(this.state.sortBy, this.state.order, pageNumber);\r\n    };\r\n\r\n    getPages = () => {\r\n        let pages = [];\r\n        for (let number = 1; number <= this.state.lastPage; number++) {\r\n            pages.push(\r\n                <Pagination.Item value={number}\r\n                                 key={number}\r\n                                 active={number === this.state.activePage}\r\n                                 onClick={() => this.handlePageChange(number)}>\r\n                    {number}\r\n                </Pagination.Item>\r\n            )\r\n        }\r\n        return pages;\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <React.Fragment>\r\n                <div className=\"w-75 m-auto\" style={{overflow: 'hidden'}}>\r\n                    <Pagination className=\"float-right flex-nowrap\">\r\n                        {this.getPages()}\r\n                    </Pagination>\r\n                </div>\r\n                <Table bordered hover striped className=\"w-75 ml-auto mr-auto text-center\">\r\n                    <thead>\r\n                        <tr>\r\n                            {this.renderTableHead()}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.renderTableRows()}\r\n                    </tbody>\r\n                </Table>\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return <Spinner animation=\"primary\" />\r\n        }\r\n    }\r\n}\r\n\r\nexport default Ranking;"]},"metadata":{},"sourceType":"module"}