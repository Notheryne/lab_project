{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\Character.jsx\";\nimport React from 'react';\nimport '../styles/Character.css';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { ADD_STATS_PATH, CHARACTER_PATH, CHARACTER_STAT_DISPLAY_NAME, INCREASING_STATS, ITEM_STAT_DISPLAY_NAME, PLACEHOLDER_IMAGES } from \"../constants/routes\";\nimport Image from \"react-bootstrap/Image\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport Button from \"react-bootstrap/Button\";\nimport CharacterEquipment from \"./SubComponents/CharacterEquipment\";\n\nclass Character extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getItemImagePath = gameItemType => {\n      return this.state.characterData['items'][gameItemType]['image_path'];\n    };\n\n    this.getItemDescription = gameItemType => {\n      const item = this.state.characterData['items'][gameItemType];\n      const stats = Object.keys(ITEM_STAT_DISPLAY_NAME).map(statName => {\n        return React.createElement(\"p\", {\n          key: statName,\n          className: \"item-description-row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, ITEM_STAT_DISPLAY_NAME[statName], \": \", item[statName]);\n      });\n      return React.createElement(Tooltip, {\n        id: \"tooltip-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, item['name']), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, item['slot']), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), stats);\n    };\n\n    this.renderImageWithDescription = (gameItemType, gameItemHeight) => {\n      if (gameItemType in this.state.characterData['items']) {\n        return React.createElement(OverlayTrigger, {\n          trigger: \"hover\",\n          placement: \"bottom\",\n          overlay: this.getItemDescription(gameItemType),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(Image, {\n          src: this.getItemImagePath(gameItemType),\n          height: gameItemHeight,\n          alt: \"character \" + gameItemType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(Image, {\n          src: PLACEHOLDER_IMAGES[gameItemType],\n          height: gameItemHeight,\n          alt: \"character \" + gameItemType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.renderCharacterStats = () => {\n      let char = this.state.characterData;\n      const stats = Object.keys(CHARACTER_STAT_DISPLAY_NAME).map(statName => {\n        const renderButton = INCREASING_STATS[statName];\n        return React.createElement(\"li\", {\n          key: statName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, CHARACTER_STAT_DISPLAY_NAME[statName]), \": \", char[statName], renderButton ? React.createElement(Button, {\n          className: \"stats-button btn-circle\",\n          variant: \"primary\",\n          size: \"sm\",\n          active: this.state.freeStats !== 0,\n          disabled: this.state.freeStats === 0,\n          onClick: () => {\n            this.props.sendPostRequest(ADD_STATS_PATH, {\n              'stat': statName\n            }).then(response => {\n              char[response['data']['increased']] += response['data']['increased_by'];\n              this.setState({\n                characterData: char\n              });\n              this.setState({\n                freeStats: this.state.freeStats - 1\n              });\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \"+\") : null);\n      });\n      return React.createElement(\"ul\", {\n        className: \"list-unstyled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, stats);\n    };\n\n    this.state = {\n      characterData: {},\n      isLoading: true,\n      freeStats: 0\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(CHARACTER_PATH).then(response => {\n      this.setState({\n        characterData: response['data']\n      });\n      this.setState({\n        freeStats: response['data']['free_stats']\n      });\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    // console.log(this.state.characterData);\n    if (!this.state.isLoading) {\n      const amuletOffset = 7;\n      return React.createElement(Jumbotron, {\n        className: \"character-view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.state.characterData['name']))), React.createElement(CharacterEquipment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Col, {\n        className: \"stats-viewer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, this.renderCharacterStats()))));\n    } else {\n      return React.createElement(Spinner, {\n        className: \"loading-spinner\",\n        animation: \"border\",\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Character;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/Character.jsx"],"names":["React","Jumbotron","Container","Row","Col","ADD_STATS_PATH","CHARACTER_PATH","CHARACTER_STAT_DISPLAY_NAME","INCREASING_STATS","ITEM_STAT_DISPLAY_NAME","PLACEHOLDER_IMAGES","Image","Spinner","OverlayTrigger","Tooltip","Button","CharacterEquipment","Character","Component","constructor","props","getItemImagePath","gameItemType","state","characterData","getItemDescription","item","stats","Object","keys","map","statName","renderImageWithDescription","gameItemHeight","renderCharacterStats","char","renderButton","freeStats","sendPostRequest","then","response","setState","isLoading","componentDidMount","sendGetRequest","catch","error","console","log","render","amuletOffset"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../styles/Character.css';\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport {\r\n    ADD_STATS_PATH,\r\n    CHARACTER_PATH,\r\n    CHARACTER_STAT_DISPLAY_NAME,\r\n    INCREASING_STATS,\r\n    ITEM_STAT_DISPLAY_NAME,\r\n    PLACEHOLDER_IMAGES\r\n} from \"../constants/routes\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport CharacterEquipment from \"./SubComponents/CharacterEquipment\";\r\n\r\nclass Character extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            characterData: {},\r\n            isLoading: true,\r\n            freeStats: 0,\r\n            }\r\n        }\r\n\r\n    componentDidMount() {\r\n    this.props.sendGetRequest(CHARACTER_PATH)\r\n            .then((response) => {\r\n                this.setState({characterData: response['data']});\r\n                this.setState({freeStats: response['data']['free_stats']});\r\n                this.setState({isLoading: false});\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        });\r\n    };\r\n\r\n    getItemImagePath = (gameItemType) => {\r\n        return this.state.characterData['items'][gameItemType]['image_path'];\r\n    };\r\n\r\n    getItemDescription = (gameItemType) => {\r\n        const item = this.state.characterData['items'][gameItemType];\r\n        const stats = Object.keys(ITEM_STAT_DISPLAY_NAME).map(statName => {\r\n            return (\r\n                <p key={statName} className=\"item-description-row\">{ITEM_STAT_DISPLAY_NAME[statName]}: {item[statName]}</p>\r\n            );\r\n        });\r\n        return (\r\n            <Tooltip id=\"tooltip-bottom\">\r\n                <strong>{item['name']}</strong> <br/>\r\n                <small>{item['slot']}</small> <br/>\r\n                {stats}\r\n            </Tooltip>\r\n        );\r\n    };\r\n\r\n    renderImageWithDescription = (gameItemType, gameItemHeight) => {\r\n        if (gameItemType in this.state.characterData['items']) {\r\n            return (\r\n                <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement=\"bottom\"\r\n                    overlay={this.getItemDescription(gameItemType)}\r\n                >\r\n                    <Image\r\n                        src={this.getItemImagePath(gameItemType)}\r\n                        height={gameItemHeight}\r\n                        alt={\"character \" + gameItemType}\r\n                    />\r\n                </OverlayTrigger>\r\n            )\r\n        } else {\r\n            return (\r\n                <Image\r\n                    src={PLACEHOLDER_IMAGES[gameItemType]}\r\n                    height={gameItemHeight}\r\n                    alt={\"character \" + gameItemType}\r\n                />\r\n            )\r\n        }\r\n    };\r\n\r\n    renderCharacterStats = () => {\r\n        let char = this.state.characterData;\r\n        const stats = Object.keys(CHARACTER_STAT_DISPLAY_NAME).map(statName => {\r\n            const renderButton = INCREASING_STATS[statName];\r\n            return (\r\n                <li key={statName}>\r\n                    <strong>{CHARACTER_STAT_DISPLAY_NAME[statName]}</strong>: {char[statName]}\r\n                    {renderButton ?\r\n                        <Button\r\n                            className=\"stats-button btn-circle\"\r\n                            variant=\"primary\"\r\n                            size=\"sm\"\r\n                            active={this.state.freeStats !== 0}\r\n                            disabled={this.state.freeStats === 0}\r\n                            onClick={() => {\r\n                                this.props.sendPostRequest(ADD_STATS_PATH, {'stat': statName})\r\n                                    .then((response) => {\r\n                                        char[response['data']['increased']] += response['data']['increased_by'];\r\n                                        this.setState({characterData: char});\r\n                                        this.setState({freeStats: this.state.freeStats - 1});\r\n                                    });\r\n                            }}\r\n                        >+</Button>\r\n                        : null\r\n                    }\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n            <ul className=\"list-unstyled\">\r\n                {stats}\r\n            </ul>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        // console.log(this.state.characterData);\r\n\r\n        if (!this.state.isLoading) {\r\n            const amuletOffset = 7;\r\n            return (\r\n                <Jumbotron className=\"character-view\">\r\n                    <Container>\r\n                        <Row className=\"justify-content-center\">\r\n                            <Col md={0}>\r\n                                <h3>{this.state.characterData['name']}</h3>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <CharacterEquipment />\r\n                        <Row>\r\n                            <Col className=\"stats-viewer\">\r\n                                {this.renderCharacterStats()}\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Jumbotron>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Spinner\r\n                    className='loading-spinner'\r\n                    animation=\"border\"\r\n                    variant=\"primary\"\r\n                />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Character;"]},"metadata":{},"sourceType":"module"}