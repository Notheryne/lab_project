{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\Ranking.jsx\";\nimport React, { Component } from 'react';\nimport { RANKING_HEADERS_DISPLAY, RANKING_PATH } from \"../constants/routes\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\n\nclass Ranking extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRankingData = (header, order) => {\n      const params = {\n        'sort_by': header,\n        'page': this.state.activePage,\n        'price': this.state.price,\n        'order': order ? 'desc' : 'asc'\n      };\n      this.props.sendGetRequestWithData(RANKING_PATH, params).then(response => {\n        this.setState({\n          characters: response['data']['characters']\n        });\n        console.log(response);\n        this.setState({\n          isLoading: false\n        });\n      }).catch(error => {\n        console.log(\"ERROR\");\n        console.log(error.response);\n        this.setState({\n          errorStatus: error.response['data']['message']\n        });\n      });\n    };\n\n    this.handleTableHeaderClick = header => {\n      this.setState({\n        isLoading: true\n      });\n      let order;\n\n      if (this.state.sortBy !== header) {\n        this.setState({\n          sortBy: header\n        });\n        order = this.state.order;\n      } else {\n        order = !this.state.order;\n      }\n\n      console.log(order);\n      this.setState({\n        order: order\n      });\n      this.getRankingData(header, order);\n    };\n\n    this.renderTableHead = () => {\n      const headers = Object.keys(RANKING_HEADERS_DISPLAY).map(header => {\n        return React.createElement(\"th\", {\n          onClick: () => this.handleTableHeaderClick(header),\n          key: header,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, RANKING_HEADERS_DISPLAY[header]);\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        onClick: () => {\n          this.handleTableHeaderClick('experience');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"#\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Character Name\"), headers);\n    };\n\n    this.renderTableRows = () => {\n      const characters = this.state.characters;\n      return Object.keys(this.state.characters).map(characterNumber => {\n        const characterData = characters[characterNumber];\n        const stats = Object.keys(characterData).map(characterStat => {\n          return React.createElement(\"td\", {\n            key: characterData['name'] + '-' + characterStat,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, characterData[characterStat]);\n        });\n        return React.createElement(\"tr\", {\n          key: characterNumber,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, characterNumber), stats);\n      });\n    };\n\n    this.state = {\n      isLoading: true,\n      activePage: 1,\n      maxPages: -1,\n      tableHeaders: [],\n      characters: {},\n      price: 0,\n      sortBy: 'experience',\n      order: true,\n      errorStatus: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getRankingData(this.state.sortBy, this.state.order);\n  }\n\n  render() {\n    if (!this.state.isLoading) {\n      return React.createElement(Table, {\n        bordered: true,\n        hover: true,\n        striped: true,\n        className: \"w-75 ml-auto mr-auto text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.renderTableHead())), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, this.renderTableRows()));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Ranking;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/Ranking.jsx"],"names":["React","Component","RANKING_HEADERS_DISPLAY","RANKING_PATH","Spinner","Table","Ranking","constructor","props","getRankingData","header","order","params","state","activePage","price","sendGetRequestWithData","then","response","setState","characters","console","log","isLoading","catch","error","errorStatus","handleTableHeaderClick","sortBy","renderTableHead","headers","Object","keys","map","renderTableRows","characterNumber","characterData","stats","characterStat","maxPages","tableHeaders","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {RANKING_HEADERS_DISPLAY, RANKING_PATH} from \"../constants/routes\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nclass Ranking extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            activePage: 1,\r\n            maxPages: -1,\r\n            tableHeaders: [],\r\n            characters: {},\r\n            price: 0,\r\n            sortBy: 'experience',\r\n            order: true,\r\n            errorStatus: '',\r\n        }\r\n    }\r\n\r\n    getRankingData = (header, order) => {\r\n        const params = {\r\n            'sort_by': header,\r\n            'page': this.state.activePage,\r\n            'price': this.state.price,\r\n            'order': order ? 'desc' : 'asc',\r\n        };\r\n        this.props.sendGetRequestWithData(RANKING_PATH, params)\r\n            .then((response) => {\r\n                this.setState({characters: response['data']['characters']});\r\n                console.log(response);\r\n                this.setState({isLoading: false})\r\n            }).catch((error) => {\r\n            console.log(\"ERROR\");\r\n            console.log(error.response);\r\n            this.setState({errorStatus: error.response['data']['message']});\r\n        })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getRankingData(this.state.sortBy, this.state.order);\r\n    }\r\n\r\n    handleTableHeaderClick = (header) => {\r\n        this.setState({isLoading: true});\r\n        let order;\r\n        if (this.state.sortBy !== header) {\r\n            this.setState({sortBy: header});\r\n            order = this.state.order;\r\n        } else {\r\n            order = !this.state.order;\r\n        }\r\n        console.log(order);\r\n        this.setState({order: order});\r\n        this.getRankingData(header, order);\r\n    };\r\n\r\n    renderTableHead = () => {\r\n        const headers = Object.keys(RANKING_HEADERS_DISPLAY).map(header => {\r\n            return (\r\n                <th onClick={() => this.handleTableHeaderClick(header)} key={header}>\r\n                    {RANKING_HEADERS_DISPLAY[header]}\r\n                </th>\r\n            )});\r\n        return (\r\n            <React.Fragment>\r\n                <th onClick={() => {this.handleTableHeaderClick('experience')}}>#</th>\r\n                <th>Character Name</th>\r\n                {headers}\r\n            </React.Fragment>\r\n        )};\r\n\r\n    renderTableRows = () => {\r\n        const characters = this.state.characters;\r\n        return Object.keys(this.state.characters).map(characterNumber => {\r\n            const characterData = characters[characterNumber];\r\n            const stats = Object.keys(characterData).map(characterStat => {\r\n                return <td key={characterData['name'] + '-' + characterStat}>{characterData[characterStat]}</td>\r\n            });\r\n            return (\r\n                <tr key={characterNumber}>\r\n                    <td>{characterNumber}</td>\r\n                    {stats}\r\n                </tr>\r\n            )\r\n        })\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <Table bordered hover striped className=\"w-75 ml-auto mr-auto text-center\">\r\n                    <thead>\r\n                        <tr>\r\n                            {this.renderTableHead()}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.renderTableRows()}\r\n                    </tbody>\r\n                </Table>\r\n            );\r\n        } else {\r\n            return <Spinner animation=\"primary\" />\r\n        }\r\n    }\r\n}\r\n\r\nexport default Ranking;"]},"metadata":{},"sourceType":"module"}