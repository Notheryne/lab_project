{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\Character.jsx\";\nimport React from 'react';\nimport '../styles/Character.css';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { ADD_STATS_PATH, CHARACTER_PATH, CHARACTER_STAT_DISPLAY_NAME, INCREASING_STATS, ITEM_STAT_DISPLAY_NAME, PLACEHOLDER_IMAGES } from \"../constants/routes\";\nimport Image from \"react-bootstrap/Image\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport Button from \"react-bootstrap/Button\";\nimport CharacterEquipment from \"./SubComponents/CharacterEquipment\";\nimport CharacterStats from \"./SubComponents/CharacterStats\";\n\nclass Character extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setFreeStats = newFreeStats => {\n      this.setState({\n        freeStats: newFreeStats\n      });\n    };\n\n    this.setCharacterData = newCharacterData => {\n      this.setState({\n        characterData: newCharacterData\n      });\n    };\n\n    this.state = {\n      characterData: {},\n      isLoading: true,\n      freeStats: 0\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(CHARACTER_PATH).then(response => {\n      this.setState({\n        characterData: response['data']\n      });\n      this.setState({\n        freeStats: response['data']['free_stats']\n      });\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    // console.log(this.state.characterData);\n    if (!this.state.isLoading) {\n      const amuletOffset = 7;\n      return React.createElement(Jumbotron, {\n        className: \"character-view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.state.characterData['name']))), React.createElement(CharacterEquipment, {\n        characterData: this.state.characterData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(CharacterStats, {\n        characterData: this.state.characterData,\n        sendPostRequest: this.props.sendPostRequest,\n        setFreeStates: this.setFreeStats,\n        setCharacterData: this.setCharacterData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(Spinner, {\n        className: \"loading-spinner\",\n        animation: \"border\",\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Character;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/Character.jsx"],"names":["React","Jumbotron","Container","Row","Col","ADD_STATS_PATH","CHARACTER_PATH","CHARACTER_STAT_DISPLAY_NAME","INCREASING_STATS","ITEM_STAT_DISPLAY_NAME","PLACEHOLDER_IMAGES","Image","Spinner","OverlayTrigger","Tooltip","Button","CharacterEquipment","CharacterStats","Character","Component","constructor","props","setFreeStats","newFreeStats","setState","freeStats","setCharacterData","newCharacterData","characterData","state","isLoading","componentDidMount","sendGetRequest","then","response","catch","error","console","log","render","amuletOffset","sendPostRequest"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../styles/Character.css';\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport {\r\n    ADD_STATS_PATH,\r\n    CHARACTER_PATH,\r\n    CHARACTER_STAT_DISPLAY_NAME,\r\n    INCREASING_STATS,\r\n    ITEM_STAT_DISPLAY_NAME,\r\n    PLACEHOLDER_IMAGES\r\n} from \"../constants/routes\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport CharacterEquipment from \"./SubComponents/CharacterEquipment\";\r\nimport CharacterStats from \"./SubComponents/CharacterStats\";\r\n\r\nclass Character extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            characterData: {},\r\n            isLoading: true,\r\n            freeStats: 0,\r\n            }\r\n        }\r\n\r\n    componentDidMount() {\r\n    this.props.sendGetRequest(CHARACTER_PATH)\r\n            .then((response) => {\r\n                this.setState({characterData: response['data']});\r\n                this.setState({freeStats: response['data']['free_stats']});\r\n                this.setState({isLoading: false});\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        });\r\n    };\r\n\r\n    setFreeStats = (newFreeStats) => {\r\n        this.setState({freeStats: newFreeStats});\r\n    };\r\n\r\n    setCharacterData = (newCharacterData) => {\r\n        this.setState({characterData: newCharacterData});\r\n    };\r\n\r\n    render() {\r\n        // console.log(this.state.characterData);\r\n\r\n        if (!this.state.isLoading) {\r\n            const amuletOffset = 7;\r\n            return (\r\n                <Jumbotron className=\"character-view\">\r\n                    <Container>\r\n                        <Row className=\"justify-content-center\">\r\n                            <Col md={0}>\r\n                                <h3>{this.state.characterData['name']}</h3>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <CharacterEquipment\r\n                            characterData={this.state.characterData}\r\n                        />\r\n                        <CharacterStats\r\n                            characterData={this.state.characterData}\r\n                            sendPostRequest={this.props.sendPostRequest}\r\n                            setFreeStates={this.setFreeStats}\r\n                            setCharacterData={this.setCharacterData}\r\n                        />\r\n                    </Container>\r\n                </Jumbotron>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Spinner\r\n                    className='loading-spinner'\r\n                    animation=\"border\"\r\n                    variant=\"primary\"\r\n                />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Character;"]},"metadata":{},"sourceType":"module"}