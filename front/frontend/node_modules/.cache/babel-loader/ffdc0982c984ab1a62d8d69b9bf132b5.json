{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\App.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport '../styles/App.css';\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Login from \"./Authentication/Login\";\nimport Character from \"./Character\";\nimport Arena from \"./Arena\";\nimport Expedition from \"./Expedition\";\nimport Trader from \"./NPC/Trader\";\nimport Healer from \"./NPC/Healer\";\nimport Manage from \"./Manage\";\nimport Logout from \"./Logout\";\nimport Menu from \"./Menu\";\nimport NotLoggedInMenu from \"./Authentication/NotLoggedInMenu\";\nimport { REFRESH_PATH } from \"../constants/routes\";\nimport Ranking from \"./Ranking\";\nimport Register from \"./Authentication/Register\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setIsAuthenticated = newAuthenticationStatus => {\n      this.setState({\n        isAuthenticated: newAuthenticationStatus\n      });\n    };\n\n    this.setCharacterGold = gold => {\n      this.setState({\n        characterGold: gold\n      });\n    };\n\n    this.prepareHeaders = refresh => {\n      return refresh ? {\n        'Authorization': 'Bearer ' + window.localStorage.getItem('refresh_token')\n      } : {\n        'Authorization': 'Bearer ' + window.localStorage.getItem('access_token')\n      };\n    };\n\n    this.sendGetRequest = (path, refresh = false) => {\n      const headers = this.prepareHeaders(refresh);\n      return new Promise((resolve, reject) => {\n        axios.get(path, {\n          headers: headers\n        }).then(response => {\n          resolve(response);\n        }).catch(error => {\n          if (error.response.status === 401) {\n            this.setIsAuthenticated(false);\n          }\n\n          reject(error);\n        });\n      });\n    };\n\n    this.sendGetRequestWithData = (path, params) => {\n      const headers = this.prepareHeaders(false);\n      return new Promise((resolve, reject) => {\n        axios.get(path, {\n          params: params,\n          headers: headers\n        }).then(response => {\n          resolve(response);\n        }).catch(error => {\n          if (error.response.status === 401) {\n            this.setIsAuthenticated(false);\n          }\n\n          reject(error);\n        });\n      });\n    };\n\n    this.sendPostRequest = (path, data, refresh = false) => {\n      const headers = this.prepareHeaders(refresh);\n      return new Promise((resolve, reject) => {\n        axios.post(path, data, {\n          headers: headers\n        }).then(response => {\n          resolve(response);\n        }).catch(error => {\n          if (error.response.status === 401) {\n            this.setIsAuthenticated(false);\n          }\n\n          reject(error);\n        });\n      });\n    };\n\n    this.sendDeleteRequest = path => {\n      const headers = this.prepareHeaders(false);\n      return new Promise((resolve, reject) => {\n        axios.delete(path, {\n          headers: headers\n        }).then(response => {\n          resolve(response);\n        }).catch(error => {\n          console.log('DELETE ERROR');\n          console.log(error.response);\n          reject(error);\n        });\n      });\n    };\n\n    this.state = {\n      isAuthenticated: false,\n      isLoading: true,\n      characterGold: 0\n    };\n  }\n\n  componentDidMount() {\n    this.sendGetRequest(REFRESH_PATH, true).then(response => {\n      this.setIsAuthenticated(true);\n      this.setState({\n        isLoading: false\n      });\n      window.localStorage.setItem('access_token', response['data']['access_token']);\n      window.localStorage.setItem('refresh_token', response['data']['refresh_token']);\n    }).catch(error => {\n      this.setIsAuthenticated(false);\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Menu, {\n      className: \"top-side-menu pb-0 mb-0\",\n      sendPostRequest: this.sendPostRequest,\n      setIsAuthenticated: this.setIsAuthenticated,\n      characterGold: this.state.characterGold,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }) : React.createElement(NotLoggedInMenu, {\n      className: \"top-side-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/character\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, !this.state.isAuthenticated ? React.createElement(Login, {\n      setIsAuthenticated: this.setIsAuthenticated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/character\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, !this.state.isAuthenticated ? React.createElement(Register, {\n      setIsAuthenticated: this.setIsAuthenticated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/character\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/character\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Character, {\n      sendGetRequest: this.sendGetRequest,\n      sendPostRequest: this.sendPostRequest,\n      setCharacterGold: this.setCharacterGold,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/arena\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Arena, {\n      sendGetRequest: this.sendGetRequest,\n      sendPostRequest: this.sendPostRequest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/expedition\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Expedition, {\n      sendGetRequest: this.sendGetRequest,\n      sendPostRequest: this.sendPostRequest,\n      setCharacterGold: this.setCharacterGold,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/npc/trader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Trader, {\n      sendGetRequest: this.sendGetRequest,\n      sendPostRequest: this.sendPostRequest,\n      setCharacterGold: this.setCharacterGold,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/npc/healer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Healer, {\n      sendGetRequest: this.sendGetRequest,\n      sendPostRequest: this.sendPostRequest,\n      setCharacterGold: this.setCharacterGold,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/ranking\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Ranking, {\n      sendGetRequestWithData: this.sendGetRequestWithData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/manage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Manage, {\n      sendGetRequest: this.sendGetRequest,\n      sendPostRequest: this.sendPostRequest,\n      sendDeleteRequest: this.sendDeleteRequest,\n      setIsAuthenticated: this.setIsAuthenticated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/logout\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, this.state.isAuthenticated ? React.createElement(Logout, {\n      sendGetRequest: this.sendGetRequest,\n      sendPostRequest: this.sendPostRequest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/App.jsx"],"names":["React","axios","Route","Switch","Redirect","Spinner","Login","Character","Arena","Expedition","Trader","Healer","Manage","Logout","Menu","NotLoggedInMenu","REFRESH_PATH","Ranking","Register","App","Component","constructor","props","setIsAuthenticated","newAuthenticationStatus","setState","isAuthenticated","setCharacterGold","gold","characterGold","prepareHeaders","refresh","window","localStorage","getItem","sendGetRequest","path","headers","Promise","resolve","reject","get","then","response","catch","error","status","sendGetRequestWithData","params","sendPostRequest","data","post","sendDeleteRequest","delete","console","log","state","isLoading","componentDidMount","setItem","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport '../styles/App.css';\r\n\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nimport Login from \"./Authentication/Login\";\r\n\r\nimport Character from \"./Character\";\r\nimport Arena from \"./Arena\";\r\nimport Expedition from \"./Expedition\";\r\n\r\nimport Trader from \"./NPC/Trader\";\r\nimport Healer from \"./NPC/Healer\";\r\n\r\nimport Manage from \"./Manage\";\r\nimport Logout from \"./Logout\";\r\n\r\nimport Menu from \"./Menu\";\r\nimport NotLoggedInMenu from \"./Authentication/NotLoggedInMenu\";\r\n\r\nimport { REFRESH_PATH } from \"../constants/routes\";\r\nimport Ranking from \"./Ranking\";\r\nimport Register from \"./Authentication/Register\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthenticated: false,\r\n            isLoading: true,\r\n            characterGold: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.sendGetRequest(REFRESH_PATH, true)\r\n            .then((response) => {\r\n                this.setIsAuthenticated(true);\r\n                this.setState({isLoading: false});\r\n                window.localStorage.setItem('access_token', response['data']['access_token']);\r\n                window.localStorage.setItem('refresh_token', response['data']['refresh_token']);\r\n            }).catch((error) => {\r\n                this.setIsAuthenticated(false);\r\n                this.setState({isLoading: false});\r\n        });\r\n    };\r\n\r\n    setIsAuthenticated = (newAuthenticationStatus) => {\r\n        this.setState({isAuthenticated: newAuthenticationStatus});\r\n    };\r\n\r\n    setCharacterGold = (gold) => {\r\n        this.setState({characterGold: gold});\r\n    };\r\n\r\n    prepareHeaders = (refresh) => {\r\n        return refresh\r\n                ?\r\n                { 'Authorization': 'Bearer ' + window.localStorage.getItem('refresh_token') }\r\n                :\r\n                { 'Authorization': 'Bearer ' + window.localStorage.getItem('access_token') };\r\n    };\r\n\r\n    sendGetRequest = (path, refresh=false) => {\r\n        const headers = this.prepareHeaders(refresh);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(path, {\r\n                headers: headers,\r\n            }).then((response) => {\r\n                resolve(response);\r\n            }).catch((error) => {\r\n                if (error.response.status === 401) {\r\n                    this.setIsAuthenticated(false);\r\n                }\r\n                reject(error);\r\n            })\r\n        })\r\n    };\r\n\r\n    sendGetRequestWithData = (path, params) => {\r\n        const headers = this.prepareHeaders(false);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(path, {\r\n                params: params,\r\n                headers: headers\r\n            }).then((response) => {\r\n                resolve(response);\r\n            }).catch((error) => {\r\n                if (error.response.status === 401) {\r\n                    this.setIsAuthenticated(false);\r\n                }\r\n                reject(error);\r\n            })\r\n        })\r\n    };\r\n\r\n    sendPostRequest = (path, data, refresh=false) => {\r\n        const headers = this.prepareHeaders(refresh);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            axios.post(path, data,{\r\n                headers: headers,\r\n            }).then((response) => {\r\n                resolve(response);\r\n            }).catch((error) => {\r\n                if (error.response.status === 401) {\r\n                    this.setIsAuthenticated(false);\r\n                }\r\n                reject(error);\r\n            })\r\n        })\r\n    };\r\n\r\n    sendDeleteRequest = (path) => {\r\n        const headers = this.prepareHeaders(false);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            axios.delete(path, {headers: headers})\r\n                .then((response) => {\r\n                    resolve(response);\r\n                }).catch((error) => {\r\n                    console.log('DELETE ERROR');\r\n                    console.log(error.response);\r\n                    reject(error);\r\n            })\r\n        })\r\n    };\r\n\r\n    render() {\r\n\r\n        if (this.state.isLoading) {\r\n            return (\r\n                <Spinner animation=\"primary\" />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.isAuthenticated\r\n                ?\r\n                    <Menu className=\"top-side-menu pb-0 mb-0\"\r\n                        sendPostRequest={this.sendPostRequest}\r\n                        setIsAuthenticated={this.setIsAuthenticated}\r\n                        characterGold={this.state.characterGold}\r\n                    />\r\n                : <NotLoggedInMenu className=\"top-side-menu\" />\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        {\r\n                            this.state.isAuthenticated\r\n                                ? <Redirect to=\"/login\" />\r\n                                : <Redirect to=\"/character\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route exact path=\"/login\">\r\n                        {\r\n                            !this.state.isAuthenticated\r\n                                ?\r\n                                <Login setIsAuthenticated={this.setIsAuthenticated} />\r\n                                : <Redirect to=\"/character\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route exact path=\"/register\">\r\n                        {\r\n                            !this.state.isAuthenticated\r\n                                ?\r\n                                <Register setIsAuthenticated={this.setIsAuthenticated} />\r\n                                : <Redirect to=\"/character\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route path=\"/character\">\r\n                        {\r\n                            this.state.isAuthenticated\r\n                                ?\r\n                                <Character\r\n                                    sendGetRequest={this.sendGetRequest}\r\n                                    sendPostRequest={this.sendPostRequest}\r\n                                    setCharacterGold={this.setCharacterGold}\r\n                                />\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route path=\"/arena\">\r\n                        {\r\n                            this.state.isAuthenticated\r\n                                ?\r\n                                <Arena\r\n                                    sendGetRequest={this.sendGetRequest}\r\n                                    sendPostRequest={this.sendPostRequest}\r\n                                />\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route path=\"/expedition\">\r\n                        {\r\n                            this.state.isAuthenticated\r\n                                ?\r\n                                <Expedition\r\n                                    sendGetRequest={this.sendGetRequest}\r\n                                    sendPostRequest={this.sendPostRequest}\r\n                                    setCharacterGold={this.setCharacterGold}\r\n                                />\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route path=\"/npc/trader\">\r\n                        {\r\n                            this.state.isAuthenticated\r\n                                ?\r\n                                <Trader\r\n                                    sendGetRequest={this.sendGetRequest}\r\n                                    sendPostRequest={this.sendPostRequest}\r\n                                    setCharacterGold={this.setCharacterGold}\r\n                                />\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route path=\"/npc/healer\">\r\n                        {\r\n                            this.state.isAuthenticated\r\n                                ? <\r\n                                Healer\r\n                                    sendGetRequest={this.sendGetRequest}\r\n                                    sendPostRequest={this.sendPostRequest}\r\n                                    setCharacterGold={this.setCharacterGold}\r\n                                />\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route path=\"/ranking\">\r\n                        {\r\n                           <\r\n                            Ranking\r\n                            sendGetRequestWithData={this.sendGetRequestWithData}\r\n                            />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route path=\"/manage\">\r\n                        {\r\n                            this.state.isAuthenticated\r\n                                ?\r\n                                <Manage\r\n                                    sendGetRequest={this.sendGetRequest}\r\n                                    sendPostRequest={this.sendPostRequest}\r\n                                    sendDeleteRequest={this.sendDeleteRequest}\r\n                                    setIsAuthenticated={this.setIsAuthenticated}\r\n                                />\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n\r\n                    <Route path=\"/logout\">\r\n                        {\r\n                            this.state.isAuthenticated\r\n                                ?\r\n                                <Logout\r\n                                    sendGetRequest={this.sendGetRequest}\r\n                                    sendPostRequest={this.sendPostRequest}\r\n                                />\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n                </Switch>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}