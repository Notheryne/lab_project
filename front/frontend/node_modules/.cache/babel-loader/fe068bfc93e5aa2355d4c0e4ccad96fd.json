{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\NPC\\\\Trader.jsx\";\nimport React from 'react';\nimport '../../styles/Trader.css';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport { ITEM_STAT_DISPLAY_NAME, TRADER_PATH } from \"../../constants/routes\";\nimport { Image } from \"react-bootstrap\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\n\nclass Trader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderItemsRow = itemsInRow => {\n      const items = itemsInRow.map(itemData => {\n        console.log(itemData);\n        const itemName = itemData['name'];\n        const itemId = itemData['id'];\n        return React.createElement(Col, {\n          key: \"item-data-for-\" + itemName + \"-(id \" + itemId + \")\",\n          xs: \"auto\",\n          className: \"m-auto\" // style={{border: \"1px solid black\"}}\n          ,\n          style: {\n            border: \"2px groove rgba(28, 110, 164, 0.52\",\n            \"border-radius\": \"10px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(Image, {\n          src: itemData['img_path'],\n          className: \"d-inline-block p-2\",\n          height: 250,\n          width: 160,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }));\n      });\n      return items;\n    };\n\n    this.renderItems = () => {\n      const topRowItems = this.state.traderItems.slice(0, 3);\n      const bottomRowItems = this.state.traderItems.slice(3, 6);\n      const topRow = this.renderItemsRow(topRowItems);\n      const bottomRow = this.renderItemsRow(bottomRowItems);\n      const rowClassName = \"bg-light w-75 m-auto\";\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: rowClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, topRow), React.createElement(Row, {\n        className: rowClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, bottomRow));\n    };\n\n    this.state = {\n      isLoading: true,\n      itemsReady: false,\n      npcName: '',\n      npcImagePath: '',\n      npcText: '',\n      charGold: 0,\n      traderItems: {}\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(TRADER_PATH).then(response => {\n      this.setState({\n        npcName: response['data']['name']\n      });\n      this.setState({\n        npcImagePath: response['data']['img_path']\n      });\n      this.setState({\n        npcText: response['data']['text']\n      });\n      this.setState({\n        charGold: response['data']['gold']\n      });\n      this.setState({\n        traderItems: response['data']['items']\n      });\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    if (!this.state.isLoading) {\n      return React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: this.state.npcImagePath,\n        height: 400,\n        width: 280,\n        alt: \"healer image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"mt-3 align-text-bottom form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.state.npcName), \": \", this.state.npcText)), React.createElement(\"div\", {\n        className: \"mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.renderItems()));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Trader;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/NPC/Trader.jsx"],"names":["React","Jumbotron","ITEM_STAT_DISPLAY_NAME","TRADER_PATH","Image","Spinner","Card","Row","Col","Container","Trader","Component","constructor","props","renderItemsRow","itemsInRow","items","map","itemData","console","log","itemName","itemId","border","renderItems","topRowItems","state","traderItems","slice","bottomRowItems","topRow","bottomRow","rowClassName","isLoading","itemsReady","npcName","npcImagePath","npcText","charGold","componentDidMount","sendGetRequest","then","response","setState","catch","error","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../../styles/Trader.css';\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport {ITEM_STAT_DISPLAY_NAME, TRADER_PATH} from \"../../constants/routes\";\r\nimport {Image} from \"react-bootstrap\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nclass Trader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            itemsReady: false,\r\n            npcName: '',\r\n            npcImagePath: '',\r\n            npcText: '',\r\n            charGold: 0,\r\n            traderItems: {},\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.sendGetRequest(TRADER_PATH)\r\n            .then((response) => {\r\n                this.setState({npcName: response['data']['name']});\r\n                this.setState({npcImagePath: response['data']['img_path']});\r\n                this.setState({npcText: response['data']['text']});\r\n                this.setState({charGold: response['data']['gold']});\r\n                this.setState({traderItems: response['data']['items']});\r\n                this.setState({isLoading: false});\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        })\r\n    }\r\n\r\n    renderItemsRow = (itemsInRow) => {\r\n        const items = itemsInRow.map((itemData) => {\r\n            console.log(itemData);\r\n\r\n            const itemName = itemData['name'];\r\n            const itemId = itemData['id'];\r\n            return (\r\n                <Col\r\n                    key={\"item-data-for-\" + itemName + \"-(id \" + itemId + \")\"}\r\n                    xs=\"auto\"\r\n                    className=\"m-auto\"\r\n                    // style={{border: \"1px solid black\"}}\r\n                    style={{\r\n                        border: \"2px groove rgba(28, 110, 164, 0.52\",\r\n                        \"border-radius\": \"10px\",\r\n                        }}\r\n                >\r\n                    <Image\r\n                        src={itemData['img_path']}\r\n                        className=\"d-inline-block p-2\"\r\n                        height={250}\r\n                        width={160}\r\n                    />\r\n                </Col>\r\n            )\r\n        });\r\n        return items;\r\n    };\r\n\r\n    renderItems = () => {\r\n        const topRowItems = this.state.traderItems.slice(0, 3);\r\n        const bottomRowItems = this.state.traderItems.slice(3, 6);\r\n        const topRow = this.renderItemsRow(topRowItems);\r\n        const bottomRow = this.renderItemsRow(bottomRowItems);\r\n        const rowClassName = \"bg-light w-75 m-auto\";\r\n        return (\r\n            <React.Fragment>\r\n                <Row className={rowClassName}>\r\n                    {topRow}\r\n                </Row>\r\n                <Row className={rowClassName}>\r\n                    {bottomRow}\r\n                </Row>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <Jumbotron>\r\n                    <div className=\"text-center\">\r\n                        <Image\r\n                            src={this.state.npcImagePath}\r\n                            height={400}\r\n                            width={280}\r\n                            alt=\"healer image\"\r\n                        />\r\n                        <span className=\"mt-3 align-text-bottom form-control\">\r\n                            <strong>{this.state.npcName}</strong>: {this.state.npcText}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"mt-3\">\r\n                        {this.renderItems()}\r\n                    </div>\r\n                </Jumbotron>\r\n            );\r\n        } else {\r\n            return (\r\n                <Spinner animation=\"primary\"/>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Trader;"]},"metadata":{},"sourceType":"module"}