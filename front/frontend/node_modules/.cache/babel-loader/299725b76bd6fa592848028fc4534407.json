{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\Manage.jsx\";\nimport React from 'react';\nimport '../styles/Manage.css';\nimport { MANAGE_PATH, MANAGE_STAT_PATH } from \"../constants/routes\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nclass Manage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.pushChange = (event, statName) => {\n      event.preventDefault();\n      console.log(event.target);\n      console.log(statName); // this.props.sendPostRequest(MANAGE_STAT_PATH,\n      //     {stat_name: statName, value: });\n      // return 0;\n    };\n\n    this.changeableStatRender = (statName, className) => {\n      const statNameToBeRendered = statName.replace('_', ' ');\n      return React.createElement(Accordion, {\n        defaultActiveKey: \"1\",\n        className: className,\n        key: \"changeable-\" + statName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Accordion.Toggle, {\n        as: Card.Header,\n        eventKey: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"text-capitalize d-inline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, statNameToBeRendered, \": \"), React.createElement(\"h5\", {\n        className: \"d-inline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.state.accountData[statName]['value']), React.createElement(\"h6\", {\n        className: \"d-inline float-right no-select\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"\\u25BC\")), React.createElement(Accordion.Collapse, {\n        eventKey: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.pushChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        as: Row,\n        controlId: \"form-\" + statNameToBeRendered + \"-change\",\n        className: \"mb-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        column: true,\n        className: \"text-capitalize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"New \", statNameToBeRendered), React.createElement(Col, {\n        md: {\n          span: 7\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Form.Control, {\n        type: \"username\",\n        name: statName,\n        placeholder: statNameToBeRendered,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: {\n          span: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Button, {\n        block: true,\n        type: \"submit\",\n        onClick: event => this.pushChange(event, statName),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Change\")))), React.createElement(\"p\", {\n        className: \"pb-0 mb-0 ml-auto mt-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.state.changeStatus[statName])))));\n    };\n\n    this.renderChangeableStats = className => {\n      return Object.keys(this.state.accountData).map(statName => {\n        if (this.state.accountData[statName]['changeable']) {\n          return this.changeableStatRender(statName, className);\n        } else {\n          return null;\n        }\n      });\n    };\n\n    this.state = {\n      isLoading: true,\n      accountData: '',\n      changeStatus: {}\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(MANAGE_PATH).then(response => {\n      this.setState({\n        accountData: response['data']\n      });\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    const rowClassNameControl = \"ml-auto mr-auto mt-2 mb-2 w-75\";\n\n    if (!this.state.isLoading) {\n      return React.createElement(Jumbotron, {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        variant: \"dark\",\n        className: rowClassNameControl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Username: \", this.state.accountData['username']['value'])), React.createElement(Alert, {\n        variant: \"dark\",\n        className: rowClassNameControl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Account created on \", this.state.accountData['create_day']['value'] + ' (' + this.state.accountData['create_hour']['value'] + ')')), this.renderChangeableStats(rowClassNameControl));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Manage;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/Manage.jsx"],"names":["React","MANAGE_PATH","MANAGE_STAT_PATH","Jumbotron","Row","Alert","Accordion","Card","Form","Col","Button","Spinner","Manage","Component","constructor","props","pushChange","event","statName","preventDefault","console","log","target","changeableStatRender","className","statNameToBeRendered","replace","Header","state","accountData","span","changeStatus","renderChangeableStats","Object","keys","map","isLoading","componentDidMount","sendGetRequest","then","response","setState","catch","error","render","rowClassNameControl"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../styles/Manage.css';\r\nimport {MANAGE_PATH, MANAGE_STAT_PATH} from \"../constants/routes\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nclass Manage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            accountData: '',\r\n            changeStatus: {},\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.sendGetRequest(MANAGE_PATH)\r\n            .then((response) => {\r\n                this.setState({accountData: response['data']});\r\n                this.setState({isLoading: false});\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        })\r\n    }\r\n\r\n    pushChange = (event, statName) => {\r\n        event.preventDefault();\r\n        console.log(event.target);\r\n        console.log(statName);\r\n        // this.props.sendPostRequest(MANAGE_STAT_PATH,\r\n        //     {stat_name: statName, value: });\r\n        // return 0;\r\n    };\r\n\r\n    changeableStatRender = (statName, className) => {\r\n        const statNameToBeRendered = statName.replace('_', ' ');\r\n        return (\r\n            <Accordion defaultActiveKey=\"1\" className={className} key={\"changeable-\" + statName}>\r\n                <Card>\r\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                        <h5 className=\"text-capitalize d-inline\">{statNameToBeRendered}: </h5>\r\n                        <h5 className=\"d-inline\">{this.state.accountData[statName]['value']}</h5>\r\n                        <h6 className=\"d-inline float-right no-select\">&#9660;</h6>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                            <Form onSubmit={this.pushChange}>\r\n                                <Form.Group\r\n                                    as={Row}\r\n                                    controlId={\"form-\" + statNameToBeRendered + \"-change\"}\r\n                                    className=\"mb-0\"\r\n                                >\r\n                                    <Form.Label column className=\"text-capitalize\">\r\n                                        New {statNameToBeRendered}\r\n                                    </Form.Label>\r\n                                    <Col md={{span: 7}}>\r\n                                        <Form.Control type=\"username\" name={statName} placeholder={statNameToBeRendered} />\r\n                                    </Col>\r\n                                    <Col md={{span: 2}}>\r\n                                        <Button block type=\"submit\" onClick={(event) => this.pushChange(event, statName)}>\r\n                                            Change\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Form>\r\n                            <p className=\"pb-0 mb-0 ml-auto mt-auto\">{this.state.changeStatus[statName]}</p>\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        )\r\n    };\r\n\r\n    renderChangeableStats = (className) => {\r\n        return Object.keys(this.state.accountData).map((statName) => {\r\n            if (this.state.accountData[statName]['changeable']) {\r\n                return this.changeableStatRender(statName, className);\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const rowClassNameControl = \"ml-auto mr-auto mt-2 mb-2 w-75\";\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <Jumbotron className=\"text-center\">\r\n                    <Alert variant=\"dark\" className={rowClassNameControl}>\r\n                        <h2>Username: {this.state.accountData['username']['value']}</h2>\r\n                    </Alert>\r\n                        <Alert variant=\"dark\" className={rowClassNameControl}>\r\n                            <h4>Account created on {\r\n                                this.state.accountData['create_day']['value'] + ' (' +\r\n                                this.state.accountData['create_hour']['value'] + ')'\r\n                            }\r\n                            </h4>\r\n                    </Alert>\r\n                    {this.renderChangeableStats(rowClassNameControl)}\r\n                </Jumbotron>\r\n            );\r\n        } else {\r\n            return (\r\n                <Spinner animation=\"primary\" />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Manage;"]},"metadata":{},"sourceType":"module"}