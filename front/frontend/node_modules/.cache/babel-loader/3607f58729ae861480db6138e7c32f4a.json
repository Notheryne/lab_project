{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\NPC\\\\Healer.jsx\";\nimport React from 'react';\nimport '../../styles/Healer.css';\nimport { HEALER_HEAL_PATH, HEALER_PATH } from \"../../constants/routes\";\nimport { Image } from \"react-bootstrap\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nclass Healer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.healerHeal = () => {\n      this.props.sendPostRequest(HEALER_HEAL_PATH, {}).then(response => {\n        const paid = response['data']['paid'];\n        const newPrice = this.state.price - paid;\n        const healingStatus = 'You were healed for ' + response['data']['healed_for'] + ' and paid ' + paid + ' gold.';\n        this.setState({\n          health: response['data']['health']\n        });\n        this.setState({\n          charGold: response['data']['gold_left']\n        });\n        this.setState({\n          price: newPrice\n        });\n        this.setState({\n          buttonState: false\n        });\n        this.setState({\n          progressBarVariant: 'success'\n        });\n        this.setState({\n          healingStatus: healingStatus\n        });\n        console.log(response);\n      }).catch(error => {\n        console.log(error.response);\n      });\n    };\n\n    this.state = {\n      buttonState: true,\n      isLoading: true,\n      npcName: '',\n      npcImagePath: '',\n      npcText: '',\n      charGold: 0,\n      price: 0,\n      health: 0,\n      maxHealth: 0,\n      progressBarVariant: '',\n      healingStatus: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(HEALER_PATH).then(response => {\n      console.log(response);\n      const health = response['data']['health'];\n      const maxHealth = response['data']['max_health'];\n      const progressBarVariant = health > maxHealth / 2 ? 'success' : 'warning';\n      const buttonState = health !== maxHealth;\n      this.setState({\n        isLoading: false\n      });\n      this.setState({\n        npcName: response['data']['name']\n      });\n      this.setState({\n        npcImagePath: response['data']['img_path']\n      });\n      this.setState({\n        npcText: response['data']['text']\n      });\n      this.setState({\n        charGold: response['data']['char_gold']\n      });\n      this.setState({\n        price: response['data']['price']\n      });\n      this.setState({\n        health: health\n      });\n      this.setState({\n        maxHealth: maxHealth\n      });\n      this.setState({\n        progressBarVariant: progressBarVariant\n      });\n      this.setState({\n        buttonState: buttonState\n      });\n    }).catch(error => {\n      this.setState({\n        healingStatus: error.response['data']['message']\n      });\n    });\n  }\n\n  render() {\n    if (!this.state.isLoading) {\n      return React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: this.state.npcImagePath,\n        height: 300,\n        width: 280,\n        alt: \"healer image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"mt-3 align-text-bottom form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.state.npcName), \": \", this.state.npcText), React.createElement(ProgressBar, {\n        className: \"bg-danger mb-0 mt-1\",\n        variant: this.state.progressBarVariant,\n        now: this.state.health,\n        max: this.state.maxHealth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Badge, {\n        className: \"text-center mt-0\",\n        variant: this.state.progressBarVariant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.state.health, \" / \", this.state.maxHealth)), React.createElement(Button, {\n        size: \"lg\",\n        active: this.state.buttonState,\n        disabled: !this.state.buttonState,\n        onClick: this.healerHeal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Heal for \", this.state.price, \" gold\"), React.createElement(\"p\", {\n        className: \"mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.state.healingStatus)));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Healer;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/NPC/Healer.jsx"],"names":["React","HEALER_HEAL_PATH","HEALER_PATH","Image","Jumbotron","ProgressBar","Badge","Button","Spinner","Healer","Component","constructor","props","healerHeal","sendPostRequest","then","response","paid","newPrice","state","price","healingStatus","setState","health","charGold","buttonState","progressBarVariant","console","log","catch","error","isLoading","npcName","npcImagePath","npcText","maxHealth","componentDidMount","sendGetRequest","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../../styles/Healer.css';\r\nimport {HEALER_HEAL_PATH, HEALER_PATH} from \"../../constants/routes\";\r\nimport {Image} from \"react-bootstrap\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nclass Healer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            buttonState: true,\r\n            isLoading: true,\r\n            npcName: '',\r\n            npcImagePath: '',\r\n            npcText: '',\r\n            charGold: 0,\r\n            price: 0,\r\n            health: 0,\r\n            maxHealth: 0,\r\n            progressBarVariant: '',\r\n            healingStatus: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.sendGetRequest(HEALER_PATH)\r\n            .then((response) => {\r\n                console.log(response);\r\n                const health = response['data']['health'];\r\n                const maxHealth = response['data']['max_health'];\r\n                const progressBarVariant = health > (maxHealth / 2) ? 'success' : 'warning';\r\n                const buttonState = health !== maxHealth;\r\n                this.setState({isLoading: false});\r\n                this.setState({npcName: response['data']['name']});\r\n                this.setState({npcImagePath: response['data']['img_path']});\r\n                this.setState({npcText: response['data']['text']});\r\n                this.setState({charGold: response['data']['char_gold']});\r\n                this.setState({price: response['data']['price']});\r\n                this.setState({health: health});\r\n                this.setState({maxHealth: maxHealth});\r\n                this.setState({progressBarVariant: progressBarVariant});\r\n                this.setState({buttonState: buttonState});\r\n            }).catch((error) => {\r\n                this.setState({healingStatus: error.response['data']['message']});\r\n        })\r\n    }\r\n\r\n    healerHeal = () => {\r\n        this.props.sendPostRequest(HEALER_HEAL_PATH, {})\r\n            .then((response) => {\r\n                const paid = response['data']['paid'];\r\n                const newPrice = this.state.price - paid;\r\n                const healingStatus = 'You were healed for ' + response['data']['healed_for'] +\r\n                    ' and paid ' + paid + ' gold.';\r\n                this.setState({health: response['data']['health']});\r\n                this.setState({charGold: response['data']['gold_left']});\r\n                this.setState({price: newPrice});\r\n                this.setState({buttonState: false});\r\n                this.setState({progressBarVariant: 'success'});\r\n                this.setState({healingStatus: healingStatus});\r\n                console.log(response);\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <Jumbotron>\r\n                    <div className=\"text-center\">\r\n                        <Image\r\n                            src={this.state.npcImagePath}\r\n                            height={300}\r\n                            width={280}\r\n                            alt=\"healer image\"\r\n                        />\r\n                        <span className=\"mt-3 align-text-bottom form-control\">\r\n                            <strong>{this.state.npcName}</strong>: {this.state.npcText}\r\n                        </span>\r\n                        <\r\n                            ProgressBar\r\n                            className=\"bg-danger mb-0 mt-1\"\r\n                            variant={this.state.progressBarVariant}\r\n                            now={this.state.health}\r\n                            max={this.state.maxHealth}\r\n                        />\r\n                        <p>\r\n                            <Badge className=\"text-center mt-0\" variant={this.state.progressBarVariant}>\r\n                                {this.state.health} / {this.state.maxHealth}\r\n                            </Badge>\r\n                        </p>\r\n                        <Button\r\n                            size=\"lg\"\r\n                            active={this.state.buttonState}\r\n                            disabled={!this.state.buttonState}\r\n                            onClick={this.healerHeal}\r\n                        >\r\n                            Heal for {this.state.price} gold\r\n                        </Button>\r\n                        <p className=\"mt-1\">\r\n                            {this.state.healingStatus}\r\n                        </p>\r\n                    </div>\r\n                </Jumbotron>\r\n            );\r\n        } else {\r\n            return <Spinner animation=\"primary\" />\r\n        }\r\n\r\n}\r\n}\r\n\r\nexport default Healer;"]},"metadata":{},"sourceType":"module"}