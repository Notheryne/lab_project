{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\Manage.jsx\";\nimport React from 'react';\nimport '../styles/Manage.css';\nimport { MANAGE_PATH } from \"../constants/routes\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nclass Manage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeableStatRender = (statName, className) => {\n      console.log(statName);\n      return React.createElement(Accordion, {\n        defaultActiveKey: \"0\",\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Accordion.Toggle, {\n        as: Card.Header,\n        eventKey: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Character Name: \", this.state.accountData['character_name']['value'])), React.createElement(Accordion.Collapse, {\n        eventKey: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        as: Row,\n        controlId: \"formCharacterNameChange\",\n        className: \"mb-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        column: true,\n        md: {\n          span: 3\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"New Character Name\"), React.createElement(Col, {\n        md: {\n          span: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Form.Control, {\n        type: \"username\",\n        placeholder: \"Character name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })), React.createElement(Col, {\n        md: {\n          span: 2,\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Button, {\n        block: true,\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Change\"))))))));\n    };\n\n    this.state = {\n      isLoading: true,\n      accountData: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(MANAGE_PATH).then(response => {\n      this.setState({\n        accountData: response['data']\n      });\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    const rowClassNameControl = \"ml-auto mr-auto mt-2 mb-2 w-75\";\n\n    if (!this.state.isLoading) {\n      return React.createElement(Jumbotron, {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        variant: \"dark\",\n        className: rowClassNameControl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Username: \", this.state.accountData['name']['value'])), this.changeableStatRender('x', rowClassNameControl));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Manage;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/Manage.jsx"],"names":["React","MANAGE_PATH","Jumbotron","Row","Alert","Dropdown","Accordion","Card","Form","Col","Button","Spinner","Manage","Component","constructor","props","changeableStatRender","statName","className","console","log","Header","state","accountData","span","offset","isLoading","componentDidMount","sendGetRequest","then","response","setState","catch","error","render","rowClassNameControl"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../styles/Manage.css';\r\nimport {MANAGE_PATH} from \"../constants/routes\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nclass Manage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            accountData: '',\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.sendGetRequest(MANAGE_PATH)\r\n            .then((response) => {\r\n                this.setState({accountData: response['data']});\r\n                this.setState({isLoading: false});\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        })\r\n    }\r\n\r\n    changeableStatRender = (statName, className) => {\r\n        console.log(statName);\r\n        return (\r\n            <Accordion defaultActiveKey=\"0\" className={className}>\r\n                <Card>\r\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                        <h4>Character Name: {this.state.accountData['character_name']['value']}</h4>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                            <Form>\r\n                                <Form.Group as={Row} controlId=\"formCharacterNameChange\" className=\"mb-0\">\r\n                                    <Form.Label column md={{span: 3}}>\r\n                                        New Character Name\r\n                                    </Form.Label>\r\n                                    <Col md={{span: 5}}>\r\n                                        <Form.Control type=\"username\" placeholder=\"Character name\" />\r\n                                    </Col>\r\n                                    <Col md={{span: 2, offset: 1}}>\r\n                                        <Button block type=\"submit\">\r\n                                            Change\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        const rowClassNameControl = \"ml-auto mr-auto mt-2 mb-2 w-75\";\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <Jumbotron className=\"text-center\">\r\n                    <Alert variant=\"dark\" className={rowClassNameControl}>\r\n                        <h2>Username: {this.state.accountData['name']['value']}</h2>\r\n                    </Alert>\r\n                    {this.changeableStatRender('x', rowClassNameControl)}\r\n                </Jumbotron>\r\n            );\r\n        } else {\r\n            return (\r\n                <Spinner animation=\"primary\" />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Manage;"]},"metadata":{},"sourceType":"module"}