{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\SubComponents\\\\FightResult.jsx\";\nimport React, { Component } from 'react';\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\n\nclass FightResult extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true\n    };\n  }\n\n  render() {\n    if (this.props.show) {\n      if (!this.state.isLoading) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, React.createElement(Accordion, {\n          defaultActiveKey: \"0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(Accordion.Toggle, {\n          as: Card.Header,\n          eventKey: \"0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, \"Winner:\", this.props.fightCourse['winner']))));\n      } else {\n        return React.createElement(Spinner, {\n          className: \"loading-spinner\",\n          animation: \"border\",\n          variant: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        });\n      }\n    }\n\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default FightResult;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/SubComponents/FightResult.jsx"],"names":["React","Component","Spinner","Accordion","Card","FightResult","constructor","props","state","isLoading","render","show","Header","fightCourse"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAChCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAGH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKH,KAAL,CAAWI,IAAf,EAAqB;AACjB,UAAI,CAAC,KAAKH,KAAL,CAAWC,SAAhB,EAA2B;AACvB,eACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,SAAD;AAAW,UAAA,gBAAgB,EAAC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,SAAD,CAAW,MAAX;AAAkB,UAAA,EAAE,EAAEL,IAAI,CAACQ,MAA3B;AAAmC,UAAA,QAAQ,EAAC,GAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACY,KAAKL,KAAL,CAAWM,WAAX,CAAuB,QAAvB,CADZ,CADJ,CADJ,CADJ,CADJ;AAWH,OAZD,MAYO;AACH,eACI,oBAAC,OAAD;AACI,UAAA,SAAS,EAAC,iBADd;AAEI,UAAA,SAAS,EAAC,QAFd;AAGI,UAAA,OAAO,EAAC,SAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;AACJ;;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAjC+B;;AAoCpC,eAAeR,WAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nclass FightResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.show) {\r\n            if (!this.state.isLoading) {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Accordion defaultActiveKey=\"0\">\r\n                            <Card>\r\n                                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                                    Winner:{this.props.fightCourse['winner']}\r\n                                </Accordion.Toggle>\r\n                            </Card>\r\n                        </Accordion>\r\n                    </React.Fragment>\r\n                );\r\n            } else {\r\n                return (\r\n                    <Spinner\r\n                        className='loading-spinner'\r\n                        animation=\"border\"\r\n                        variant=\"primary\"\r\n                    />\r\n                );\r\n            }\r\n        }\r\n        return <p></p>\r\n    }\r\n}\r\n\r\nexport default FightResult;"]},"metadata":{},"sourceType":"module"}