{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\Character.jsx\";\nimport React from 'react';\nimport '../styles/Character.css';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { CHARACTER_PATH, CHARACTER_STAT_DISPLAY_NAME } from \"../constants/routes\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport CharacterEquipment from \"./SubComponents/CharacterEquipment\";\nimport CharacterStats from \"./SubComponents/CharacterStats\";\n\nclass Character extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setFreeStats = newFreeStats => {\n      this.setState({\n        freeStats: newFreeStats\n      });\n    };\n\n    this.setCharacterData = newCharacterData => {\n      this.setState({\n        characterData: newCharacterData\n      });\n    };\n\n    this.state = {\n      characterData: {},\n      isLoading: true,\n      freeStats: 0\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(CHARACTER_PATH).then(response => {\n      console.log(response['data']);\n      this.setState({\n        characterData: response['data']\n      });\n      this.setState({\n        freeStats: response['data']['free_stats']\n      });\n      this.props.setCharacterGold(response['data']['gold']);\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    if (!this.state.isLoading) {\n      return React.createElement(Jumbotron, {\n        className: \"character-view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.state.characterData['name']))), React.createElement(CharacterEquipment, {\n        characterData: this.state.characterData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(Row, {\n        className: \"justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(CharacterStats, {\n        toRender: CHARACTER_STAT_DISPLAY_NAME,\n        characterData: this.state.characterData,\n        sendPostRequest: this.props.sendPostRequest,\n        manageStats: true,\n        setFreeStates: this.setFreeStats,\n        setCharacterData: this.setCharacterData,\n        freeStats: this.state.freeStats,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })))));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Character;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/Character.jsx"],"names":["React","Jumbotron","Container","Row","Col","CHARACTER_PATH","CHARACTER_STAT_DISPLAY_NAME","Spinner","CharacterEquipment","CharacterStats","Character","Component","constructor","props","setFreeStats","newFreeStats","setState","freeStats","setCharacterData","newCharacterData","characterData","state","isLoading","componentDidMount","sendGetRequest","then","response","console","log","setCharacterGold","catch","error","render","sendPostRequest"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../styles/Character.css';\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport {\r\n    CHARACTER_PATH, CHARACTER_STAT_DISPLAY_NAME,\r\n} from \"../constants/routes\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport CharacterEquipment from \"./SubComponents/CharacterEquipment\";\r\nimport CharacterStats from \"./SubComponents/CharacterStats\";\r\n\r\nclass Character extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            characterData: {},\r\n            isLoading: true,\r\n            freeStats: 0,\r\n            }\r\n        }\r\n\r\n    componentDidMount() {\r\n    this.props.sendGetRequest(CHARACTER_PATH)\r\n            .then((response) => {\r\n                console.log(response['data']);\r\n                this.setState({characterData: response['data']});\r\n                this.setState({freeStats: response['data']['free_stats']});\r\n                this.props.setCharacterGold(response['data']['gold']);\r\n                this.setState({isLoading: false});\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        });\r\n    };\r\n\r\n    setFreeStats = (newFreeStats) => {\r\n        this.setState({freeStats: newFreeStats});\r\n    };\r\n\r\n    setCharacterData = (newCharacterData) => {\r\n        this.setState({characterData: newCharacterData});\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.isLoading) {\r\n            return (\r\n                <Jumbotron className=\"character-view\">\r\n                    <Container>\r\n                        <Row className=\"justify-content-md-center\">\r\n                            <Col md=\"auto\">\r\n                                <h3>{this.state.characterData['name']}</h3>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <CharacterEquipment\r\n                            characterData={this.state.characterData}\r\n                        />\r\n                        <Row className=\"justify-content-center\">\r\n                            <Col md={\"auto\"}>\r\n                                <CharacterStats\r\n                                    toRender={CHARACTER_STAT_DISPLAY_NAME}\r\n                                    characterData={this.state.characterData}\r\n                                    sendPostRequest={this.props.sendPostRequest}\r\n                                    manageStats={true}\r\n                                    setFreeStates={this.setFreeStats}\r\n                                    setCharacterData={this.setCharacterData}\r\n                                    freeStats={this.state.freeStats}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Jumbotron>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <Spinner animation=\"primary\" />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Character;"]},"metadata":{},"sourceType":"module"}