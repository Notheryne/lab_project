{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programowanie\\\\front\\\\frontend\\\\src\\\\components\\\\NPC\\\\Healer.jsx\";\nimport React from 'react';\nimport '../../styles/Healer.css';\nimport { HEALER_HEAL_PATH, HEALER_PATH } from \"../../constants/routes\";\nimport { Image } from \"react-bootstrap\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nclass Healer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.healerHeal = () => {\n      this.props.sendPostRequest(HEALER_HEAL_PATH, {}).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error.response);\n      });\n    };\n\n    this.state = {\n      npcData: {},\n      buttonState: true,\n      isLoading: true,\n      charGold: 0,\n      price: 0,\n      health: 0,\n      healthBadgeColor: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendGetRequest(HEALER_PATH).then(response => {\n      console.log(response);\n      this.setState({\n        npcData: response['data']\n      });\n      this.setState({\n        isLoading: false\n      });\n      this.setState({\n        charGold: response['data']['char_gold']\n      });\n    }).catch(error => {\n      console.log(error.response);\n    });\n  }\n\n  render() {\n    if (!this.state.isLoading) {\n      const maxHealth = this.state.npcData['max_health'];\n      const price = this.state.npcData['price'];\n      return React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: this.state.npcData['img_path'],\n        height: 400,\n        width: 280,\n        alt: \"healer image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"mt-3 align-text-bottom form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.state.npcData['text']), React.createElement(ProgressBar, {\n        className: \"bg-info mb-0 mt-1\",\n        animated: true,\n        variant: \"success\",\n        now: this.state.health,\n        max: maxHealth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Badge, {\n        className: \"text-center mt-0\",\n        variant: this.state.healthBadgeColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.state.health, \" / \", maxHealth)), React.createElement(Button // className={}\n      , {\n        size: \"lg\",\n        active: this.state.buttonState,\n        disabled: !this.state.buttonState,\n        onClick: this.healerHeal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Heal for \", price, \" gold\")));\n    } else {\n      return React.createElement(Spinner, {\n        animation: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default Healer;","map":{"version":3,"sources":["D:/Programowanie/front/frontend/src/components/NPC/Healer.jsx"],"names":["React","HEALER_HEAL_PATH","HEALER_PATH","Image","Jumbotron","ProgressBar","Badge","Button","Spinner","Healer","Component","constructor","props","healerHeal","sendPostRequest","then","response","console","log","catch","error","state","npcData","buttonState","isLoading","charGold","price","health","healthBadgeColor","componentDidMount","sendGetRequest","setState","render","maxHealth"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport '../../styles/Healer.css';\r\nimport {HEALER_HEAL_PATH, HEALER_PATH} from \"../../constants/routes\";\r\nimport {Image} from \"react-bootstrap\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nclass Healer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            npcData: {},\r\n            buttonState: true,\r\n            isLoading: true,\r\n            charGold: 0,\r\n            price: 0,\r\n            health: 0,\r\n            healthBadgeColor: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.sendGetRequest(HEALER_PATH)\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.setState({npcData: response['data']});\r\n                this.setState({isLoading: false});\r\n                this.setState({charGold: response['data']['char_gold']});\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        })\r\n    }\r\n\r\n    healerHeal = () => {\r\n        this.props.sendPostRequest(HEALER_HEAL_PATH, {})\r\n            .then((response) => {\r\n                console.log(response);\r\n            }).catch((error) => {\r\n                console.log(error.response);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if (!this.state.isLoading) {\r\n            const maxHealth = this.state.npcData['max_health'];\r\n            const price = this.state.npcData['price'];\r\n            return (\r\n                <Jumbotron>\r\n                    <div className=\"text-center\">\r\n                        <Image\r\n                            src={this.state.npcData['img_path']}\r\n                            height={400}\r\n                            width={280}\r\n                            alt=\"healer image\"\r\n                        />\r\n                        <span className=\"mt-3 align-text-bottom form-control\">\r\n                       {this.state.npcData['text']}\r\n                    </span>\r\n                        <\r\n                            ProgressBar\r\n                            className=\"bg-info mb-0 mt-1\"\r\n                            animated\r\n                            variant={\"success\"}\r\n                            now={this.state.health}\r\n                            max={maxHealth}\r\n                        />\r\n                        <p>\r\n                            <Badge className=\"text-center mt-0\" variant={this.state.healthBadgeColor}>\r\n                                {this.state.health} / {maxHealth}\r\n                            </Badge>\r\n                        </p>\r\n                        <Button\r\n                            // className={}\r\n                            size=\"lg\"\r\n                            active={this.state.buttonState}\r\n                            disabled={!this.state.buttonState}\r\n                            onClick={this.healerHeal}\r\n                        >\r\n                            Heal for {price} gold\r\n                        </Button>\r\n                    </div>\r\n                </Jumbotron>\r\n            );\r\n        } else {\r\n            return <Spinner animation=\"primary\" />\r\n        }\r\n\r\n}\r\n}\r\n\r\nexport default Healer;"]},"metadata":{},"sourceType":"module"}